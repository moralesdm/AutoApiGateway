name: Deploy API Gateway

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SERVICE1_HOST: ${{ secrets.USUARIOS_HOST }}
      SERVICE1_PORT: ${{ secrets.USUARIOS_PORT }}
      SERVICE2_HOST: ${{ secrets.VEHICULOS_HOST }}
      SERVICE2_PORT: ${{ secrets.VEHICULOS_PORT }}
      SERVICE3_HOST: ${{ secrets.ALQUILERES_HOST }}
      SERVICE3_PORT: ${{ secrets.ALQUILERES_PORT }}
      SERVICE4_HOST: ${{ secrets.FACTURAS_HOST }}
      SERVICE4_PORT: ${{ secrets.FACTURAS_PORT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug list project files
        run: |
          echo "Current directory:"
          pwd
          echo "Files:"
          ls -la
          echo "Nginx folder:"
          ls -la nginx/

      - name: Create remote directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: mkdir -p /home/${{ secrets.EC2_USER }}/api-gateway

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yml,nginx/Dockerfile,nginx/default.template.conf,nginx/entrypoint.sh"
          target: "/home/${{ secrets.EC2_USER }}/api-gateway"

      - name: SSH into EC2 and deploy API Gateway
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          envs: SERVICE1_HOST,SERVICE1_PORT,SERVICE2_HOST,SERVICE2_PORT,SERVICE3_HOST,SERVICE3_PORT,SERVICE4_HOST,SERVICE4_PORT
          script: |
            set -e

            echo "🔍 Checking Docker installation..."
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "✅ Docker is already installed."
            fi

            echo "🔍 Checking Docker Compose..."
            if ! docker compose version &> /dev/null; then
              echo "🔧 Installing Docker Compose plugin..."
              sudo apt-get install -y docker-compose-plugin || sudo apt-get install -y docker-compose
            else
              echo "✅ Docker Compose is already installed."
            fi

            cd /home/${{ secrets.EC2_USER }}/api-gateway

            echo "🛑 Stopping existing containers..."
            SERVICE1_HOST=$SERVICE1_HOST SERVICE1_PORT=$SERVICE1_PORT \
            SERVICE2_HOST=$SERVICE2_HOST SERVICE2_PORT=$SERVICE2_PORT \
            SERVICE3_HOST=$SERVICE3_HOST SERVICE3_PORT=$SERVICE3_PORT \
            SERVICE4_HOST=$SERVICE4_HOST SERVICE4_PORT=$SERVICE4_PORT \
            sudo -E docker compose --env-file /dev/null down

            echo "🚀 Starting new containers with environment variables..."
            SERVICE1_HOST=$SERVICE1_HOST SERVICE1_PORT=$SERVICE1_PORT \
            SERVICE2_HOST=$SERVICE2_HOST SERVICE2_PORT=$SERVICE2_PORT \
            SERVICE3_HOST=$SERVICE3_HOST SERVICE3_PORT=$SERVICE3_PORT \
            SERVICE4_HOST=$SERVICE4_HOST SERVICE4_PORT=$SERVICE4_PORT \
            sudo -E docker compose --env-file /dev/null up -d --build

            echo "✅ Deployment complete!"